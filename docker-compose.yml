version: "3.9"
services:
  frontend:
    build:
      context: frontend
      dockerfile: ./frontend/Dockerfile.dev
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=${NODE_ENV}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
    volumes:
      - ./frontend:/app:delegated
      - frontend_node_modules:/app/node_modules
    networks:
      - app-network

  backend:
    container_name: backend
    build:
      context: backend
      dockerfile: ./backend/Dockerfile.dev
    volumes:
      - ./backend:/app
    ports:
      - "${BACKEND_PORT}:8000"
      - "${DEBUG_PORT}:5005"
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app-network

  db:
    image: postgres:15
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  frontend_node_modules:
  backend_m2: 
